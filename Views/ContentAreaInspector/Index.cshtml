@using BVNetwork.ContentAreaInspector
@using EPiServer.Core
@model BVNetwork.ContentAreaInspector.ContentAreaInspectorViewModel
@{
    ViewBag.Title = "title";
    Layout = null;
}
<div class="inspector_container">
    <div class="inspector_main">
        <ul>
            <li>Type: @Model.Content.Type</li>
            @RenderStatus(Model.Content.Status)
        </ul>
    </div>
    <ul class="inspector">
        @RenderContentArea(Model.ContentAreaItems)
        @if (Model.ContentReferenceItems != null && Model.ContentReferenceItems.Any())
        {
            foreach (var contentReference in Model.ContentReferenceItems)
            {
                <li class="inspector_area">
                    <div class="inspector_property">[Content reference]<i> @contentReference.Name</i>  value:</div>
                    <div class="inspector_content_area">
                        <div>
                            @RenderContent(contentReference.ContentReferenceItem, null)
                        </div>
                    </div>
                </li>
            }
        }
    </ul>
</div>


@helper RenderContentArea(List<ContentAreaInspectorViewModel.ContentAreaItemViewModel> items)
{
var previousContentGroup = "";
foreach (var item in items)
{
        <li class="inspector_area">
            <div class="inspector_property">[Content area]<i> @item.Name</i> <text> value:</text></div>
            <div class="inspector_content_area">
                <div>
                    @foreach (var subItem in item.ContentAreaItems)
                    {
                        @RenderContent(subItem, previousContentGroup)
                        {
                            previousContentGroup = subItem.ContentGroup;
                        }
                    }

                </div>
            </div>
        </li>
}
}


@helper RenderContent(ContentAreaInspectorViewModel inspectorViewModel, string previousContentGroup)
{
if (!string.IsNullOrEmpty(previousContentGroup) && string.IsNullOrEmpty(inspectorViewModel.ContentGroup))
{
        @:</div>
}
if (string.IsNullOrEmpty(previousContentGroup) && !string.IsNullOrEmpty(inspectorViewModel.ContentGroup))
{
        @:<div class="inspector_group">
     }
    <ul class="inspector inspectorcontent">
        <li class="inspectoritem">
            <span>
                <ul>
                    @if (!string.IsNullOrEmpty(inspectorViewModel.ContentGroup))
                    {
                        <li class="inspector_green">
                            <i>
                                <span class="epi-iconUsers dijitFolderOpened inspector_visitor_group"></span>
                                <span class="inspector_black">Visible for:</span>
                                @if (inspectorViewModel.VisitorGroupsNames != null && inspectorViewModel.VisitorGroupsNames.Any())
                                {

                                    for (int i = 0; i < inspectorViewModel.VisitorGroupsNames.Count; i++)
                                    {
                                        var visitorGroup = inspectorViewModel.VisitorGroupsNames[i];
                                        @visitorGroup
                                        if (i != inspectorViewModel.VisitorGroupsNames.Count - 1)
                                        {
                                            <span class="inspector_black">and</span>
                                        }
                                    }
                                }
                                else
                                {
                                    <text>Everyone else </text>
                                }
                            </i>
                        </li>
                    }
                    @if (inspectorViewModel.Content.MainType == MainContentType.Image)
                    {
                        <img width="48" height="48" src="@inspectorViewModel.Content.ThumbnailUrl" />
                    }
                    else if (inspectorViewModel.Content.MainType == MainContentType.Block)
                    {
                        <span class="epi-iconObjectSharedBlock epi-icon--large inspector_block"></span>
                    }
                    else if (inspectorViewModel.Content.MainType == MainContentType.Page)
                    {
                        <span class="epi-iconObjectPage epi-icon--large inspector_block"></span>
                    }
                    <li>
                        <b>@inspectorViewModel.Content.Name</b> <a target="_blank" class="epi-visibleLink" href="@inspectorViewModel.Content.EditUrl">edit </a>

                        <span data-type="@inspectorViewModel.Content.MainType" data-previewUrl="@inspectorViewModel.Content.PreviewUrl" class="inspector_preview_button dijitReset dijitInline dijitIcon epi-icon--medium epi-iconPreview">

                        </span>
                    </li>
                    <li>Type: @inspectorViewModel.Content.Type</li>
                    @RenderStatus(inspectorViewModel.Content.Status)
                    @if (inspectorViewModel.Content.IsMaxLevel)
                    {
                        <li><i>Content has sub items, but the inspector will only show 10 sub item levels. Please edit and inspect a sub item to see additional levels</i></li>
                    }
                    @if (inspectorViewModel.Content.HasDuplicateParent)
                    {
                        <li><i>Content has already been expanded by a parent item. Further sub items will not be displayed</i></li>
                    }
                </ul>
            </span>
        </li>

        @RenderContentArea(inspectorViewModel.ContentAreaItems)
        @if (inspectorViewModel.ContentReferenceItems != null && inspectorViewModel.ContentReferenceItems.Any())
        {
            foreach (var contentReferenceViewModel in inspectorViewModel.ContentReferenceItems)
            {
                <li>
                    <div class="inspector_property">
                        [Content reference]<i> @contentReferenceViewModel.Name</i> value:
                        @RenderContent(contentReferenceViewModel.ContentReferenceItem, null)
                    </div>
                </li>
            }
        }
    </ul>
}

@helper RenderStatus(VersionStatus status)
{
string cssClass = "";
if (status == VersionStatus.DelayedPublish)
{
    cssClass = "inspector_scheduled";
}
else if (status != VersionStatus.Published)
{
    cssClass = "inspector_not_published epi-iconDanger  epi-icon--colored";
}
    <li>Status: <span class="@cssClass">@EPiServer.Framework.Localization.LocalizationService.Current.GetString("/episerver/cms/versionstatus/" + status.ToString().ToLower())</span></li>
}
